name: PlexServerUpStep-${self:provider.stage}
definition:
  Comment: "PlexServerUpStep - with IP"
  StartAt: AttachPlexIp
  States:
    AttachPlexIp:
      Type: Task
      Resource: "${self:custom.lambdaArnBase}-attach_plex_ip"
      Retry: ${self:custom.retryStep}
      Next: StartPlexEc2
    StartPlexEc2:
      Type: Task
      Resource: "${self:custom.lambdaArnBase}-start_plex_ec2"
      Retry: ${self:custom.retryStep}
      Next: WaitForInstanceRunning
    WaitForInstanceRunning:
      Type: Wait
      Seconds: 10
      Next: CheckInstanceRunning
    CheckInstanceRunning:
      Type: Task
      Resource: "${self:custom.lambdaArnBase}-check_instance_state"
      Retry: ${self:custom.retryStep}
      Next: InstanceRunningChoice
    InstanceRunningChoice:
      Type: Choice
      Choices:
        - Variable: "$.instanceState"
          StringEquals: "error"
          Next: PlexServerUpFail
        - Variable: "$.instanceState"
          StringEquals: "stopped"
          Next: StartPlexEc2
        - Variable: "$.instanceState"
          StringEquals: "running"
          Next: WaitForStatusOk
      Default: WaitForInstanceRunning
    WaitForStatusOk:
      Type: Wait
      Seconds: 10
      Next: CheckStatusOkStatus
    CheckStatusOkStatus:
      Type: Task
      Resource: "${self:custom.lambdaArnBase}-check_instance_status"
      Retry: ${self:custom.retryStep}
      Next: StatusOkChoice
    StatusOkChoice:
      Type: Choice
      Choices:
        - Variable: "$.instanceStatus"
          StringEquals: "STATUS_ERROR"
          Next: PlexServerUpFail
        - Variable: "$.instanceStatus"
          StringEquals: "STATUS_OK"
          Next: MyplexAccountCleanup
      Default: WaitForStatusOk
    MyplexAccountCleanup:
      Type: Task
      Resource: "${self:custom.lambdaArnBase}-myplex_account_cleanup"
      Retry: ${self:custom.retryStep}
      Next: MyPlexGetAccountToken
    MyPlexGetAccountToken:
      Type: Task
      Resource: "${self:custom.lambdaArnBase}-myplex_get_account_token"
      Retry: ${self:custom.retryStep}
      Next: ClaimPlexServer
    ClaimPlexServer:
      Type: Task
      Resource: "${self:custom.lambdaArnBase}-claim_plex_server"
      Retry: ${self:custom.retryStep}
      Next: CheckRunCommandStatus
    CheckRunCommandStatus:
      Type: Task
      Resource: "${self:custom.lambdaArnBase}-check_run_command_status"
      Retry: ${self:custom.retryStep}
      Next: RunCommandChoice
    RunCommandChoice:
      Type: Choice
      Choices:
        - Variable: "$.runCommandStatus"
          StringEquals: "Failed"
          Next: PlexServerUpFail
        - Variable: "$.runCommandStatus"
          StringEquals: "Success"
          Next: MyPlexServerSettings
      Default: WaitForRunCommand
    WaitForRunCommand:
      Type: Wait
      Seconds: 10
      Next: CheckRunCommandStatus
    MyPlexServerSettings:
      Type: Task
      Resource: "${self:custom.lambdaArnBase}-myplex_server_settings"
      Retry: ${self:custom.retryStep}
      Next: MyPlexAddMoviesSection
    MyPlexAddMoviesSection:
      Type: Task
      Resource: "${self:custom.lambdaArnBase}-myplex_add_movies_section"
      Retry: ${self:custom.retryStep}
      Next: Final
    PlexServerUpFail:
      Type: Fail
      Cause: plex server up step function failed
    Final:
      Type: Pass
      End: true
