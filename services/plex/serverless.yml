org: joshgarnerdev
app: plex-ec2
service: plex-ec2-services-plex
provider:
  name: aws
  runtime: python3.7
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-west-2'}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - ssm:GetParametersByPath
      Resource: 
        - arn:aws:ssm:us-west-2:285012317380:parameter/plex-ec2/
    - Effect: Allow
      Action:
        - states:StartExecution
        - states:ListExecutions
      Resource:
        - "${self:resources.Outputs.PlexServerSetupStepArn.Value}"
    - Effect: Allow
      Action:
        - cloudformation:DescribeStacks
      Resource: 
        - arn:aws:cloudformation:#{AWS::Region}:#{AWS::AccountId}:stack/plex-vpc-ec2-${self:provider.stage}/*
        - arn:aws:cloudformation:#{AWS::Region}:#{AWS::AccountId}:stack/plex-ec2-resources-${self:provider.stage}/*
        - arn:aws:cloudformation:#{AWS::Region}:#{AWS::AccountId}:stack/plex-ec2-services-plex-${self:provider.stage}/*
        - arn:aws:cloudformation:#{AWS::Region}:#{AWS::AccountId}:stack/plex-ec2-services-ec2-${self:provider.stage}/*
  apiGateway:
    restApiId: 
      Fn::ImportValue: plex-ec2-resources-${self:provider.stage}-RestApiId
    restApiRootResourceId: 
      Fn::ImportValue: plex-ec2-resources-${self:provider.stage}-RestApiRootResourceId
  environment:
    stage: ${self:provider.stage}
    plexServerSetupStepArn: ${self:resources.Outputs.PlexServerSetupStepArn.Value}
custom:
  lambdaArnBase: "arn:aws:lambda:${self:provider.region}:#{AWS::AccountId}:function:${self:service}-${self:provider.stage}"
  retryStep:
    - ErrorEquals:
      - States.ALL
      IntervalSeconds: 5
      MaxAttempts: 2
      BackoffRate: 2
  pythonRequirements:
    dockerizePip: true
plugins:
  - serverless-step-functions
  - serverless-pseudo-parameters
  - serverless-python-requirements
package:
  exclude:
    - node_modules/**
    - venv/**
functions:
  myPlexGetAccountToken:
    handler: functions/myplex_get_account_token.handler
    runtime: python3.7
    timeout: 60
  myplexAccountCleanup:
    handler: functions/myplex_account_cleanup.handler
    runtime: python3.7
    timeout: 60
  myPlexServerInit:
    handler: functions/myplex_server_init.handler
    runtime: python3.7
    timeout: 60
  myPlexAddMoviesSection:
    handler: functions/myplex_add_movies_section.handler
    runtime: python3.7
    timeout: 60
  invokePlexServerSetup:
    handler: functions/invoke_plex_server_setup.handler
    runtime: python3.7
    timeout: 30
    events:
      - http:
          path: invoke-plex-server-setup
          method: get
stepFunctions:
  stateMachines:
    plexServerSetupStep: 
      name: PlexServerSetupStep-${self:provider.stage}
      definition:
        Comment: "State Engine for GTO to Customer First"
        StartAt: MyplexAccountCleanupState
        States:
          MyplexAccountCleanupState:
            Type: Task
            Resource: "${self:custom.lambdaArnBase}-myplexAccountCleanup"
            Retry: ${self:custom.retryStep}
            Next: MyPlexGetAccountTokenState
          MyPlexGetAccountTokenState:
            Type: Task
            Resource: "${self:custom.lambdaArnBase}-myPlexGetAccountToken"
            Retry: ${self:custom.retryStep}
            Next: MyPlexServerInitState
          MyPlexServerInitState:
            Type: Task
            Resource: "${self:custom.lambdaArnBase}-myPlexServerInit"
            Retry: ${self:custom.retryStep}
            Next: MyPlexAddMoviesSectionState
          MyPlexAddMoviesSectionState:
            Type: Task
            Resource: "${self:custom.lambdaArnBase}-myPlexAddMoviesSection"
            Retry: ${self:custom.retryStep}
            Next: FinalState
          FinalState:
            Type: Pass
            End: true
resources:
  Outputs:
    PlexServerSetupStepArn:
      Description: The ARN of the Plex Server Setup State Machine
      Value:
        Ref: PlexServerSetupStepDash${self:provider.stage}
